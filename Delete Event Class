from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sqlite3


class Delete_Event(QDialog):
    def __init__(self, code):
        super(Delete_Event, self).__init__()
        self.code = code
        self.setup_ui(self)

    def setup_ui(self, Dialog):
        Dialog.setObjectName("Delete Event")
        Dialog.resize(400, 300)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(30, 240, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(7, 90, 120, 22))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(125, 90, 211, 22))
        self.lineEdit.setObjectName("lineEdit")

        self.label2 = QtWidgets.QLabel(Dialog)
        self.label2.setGeometry(QtCore.QRect(12, 117, 120, 25))
        self.label2.setObjectName("label2")
        self.lineEdit2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit2.setGeometry(QtCore.QRect(125, 120, 211, 22))
        self.lineEdit2.setObjectName("lineEdit2")

        self.label3 = QtWidgets.QLabel(Dialog)
        self.label3.setGeometry(QtCore.QRect(9, 150, 120, 22))
        self.label3.setObjectName("label3")
        self.lineEdit3 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit3.setGeometry(QtCore.QRect(125, 150, 211, 22))
        self.lineEdit3.setObjectName("lineEdit3")

        self.retranslate_ui(Dialog)
        self.buttonBox.accepted.connect(self.delete_event)
        self.buttonBox.rejected.connect(self.close_application)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslate_ui(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Delete Event"))
        self.label.setText(_translate("Dialog", "Delete Event Name:"))
        self.label2.setText(_translate("Dialog", "Delete Event Date:"))
        self.label3.setText(_translate("Dialog", "Delete Event Time:"))

    def close_application(self):
        confirmation = QMessageBox.question(self, "Confirm Close",
                                            "Are you sure you want to close this window?",
                                            QMessageBox.Yes | QMessageBox.No |
                                            QMessageBox.Cancel, QMessageBox.Cancel)
        if confirmation == QMessageBox.Yes:
            Delete_Event.close(self)
        if confirmation == QMessageBox.No:
            pass
        if confirmation == QMessageBox.Cancel:
            pass

    def no_input(self):
        show_msg = QMessageBox(QMessageBox.Critical,
                               'Field Empty',
                               "Please input valid information in all fields.",
                               QMessageBox.Ok | QMessageBox.Ok)
        show_msg.exec_()
        self.lineEdit.setFocus()

    def invalid(self):
        show_msg = QMessageBox(QMessageBox.Critical,
                               'Event Not Found',
                               "Event not in calendar.",
                               QMessageBox.Ok | QMessageBox.Ok)
        show_msg.exec_()
        self.lineEdit.setFocus()
        self.lineEdit.clear()
        self.lineEdit2.clear()
        self.lineEdit3.clear()

    def success(self):
        print("IN SUCCESS")
        show_msg = QMessageBox(QMessageBox.Information,
                               "Removed Event",
                               "Successfully removed event from calendar.",
                               QMessageBox.Ok)
        show_msg.exec_()
        Delete_Event.close(self)

    def delete_event(self):
        self.name = self.lineEdit.text()
        self.date = self.lineEdit2.text()
        self.time = self.lineEdit3.text()
        if (self.name == "") or (self.date == "") or (self.time == ""):
            self.no_input()
        else:
            print("in delete event")
            db_path = "calendar_data_db.db"
            connection = sqlite3.connect(db_path)

            cursor = connection.cursor()
            event_time = None
            for row in cursor.execute("SELECT * FROM Calendar WHERE event_name=? AND code=?", (self.name, self.code)):
                if row[2] == self.time:
                    if row[1] == self.date:
                        event_name = row[0]
                        event_date = row[1]
                        event_time = row[2]
                        print(f'{event_name:10} {event_date:15} {event_time:10}')
            if event_time == None:
                print("does not exists")
                self.invalid()
            else:
                print("DELETE EVENT")

                sql_command = """
                DELETE FROM Calendar WHERE event_name=? AND event_date=? AND event_time=? AND code=?;
                """

                user_record = (self.name, self.date, self.time, self.code)
                cursor.execute(sql_command, user_record)
                # connection.commit()
                connection.close()

                # #CALL TO CHECK OVERLAP

                print("out delete event")
                self.success()


