from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sqlite3


class Share(QDialog):
    def __init__(self, parent):
        super(Share, self).__init__(parent)
        self._parent = parent
        self.setup_ui(self)

    def setup_ui(self, Dialog):
        Dialog.setObjectName("Share")
        Dialog.resize(400, 300)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(30, 240, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(55, 122, 55, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(110, 120, 211, 22))
        self.lineEdit.setObjectName("lineEdit")

        self.retranslate_ui(Dialog)
        self.buttonBox.accepted.connect(self.send_to)
        self.buttonBox.rejected.connect(self.close_application)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslate_ui(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Share"))
        self.label.setText(_translate("Dialog", "Send to:"))

    def close_application(self):
        confirmation = QMessageBox.question(self, "Confirm Close",
                                            "Are you sure you want to close this window?",
                                            QMessageBox.Yes | QMessageBox.No |
                                            QMessageBox.Cancel, QMessageBox.Cancel)
        if confirmation == QMessageBox.Yes:
            Share.close(self)
        if confirmation == QMessageBox.No:
            pass
        if confirmation == QMessageBox.Cancel:
            pass

    def not_found(self):
        show_msg = QMessageBox(QMessageBox.Critical,
                               "User Not Found",
                               "Please enter a valid username.",
                               QMessageBox.Ok | QMessageBox.Ok)
        show_msg.exec_()
        self.lineEdit.setFocus()
        self.lineEdit.clear()

    def success(self):
        print("IN SUCCESS")
        show_msg = QMessageBox(QMessageBox.Information,
                               "Shared Calendar",
                               f'Successfully shared calendar with {self.name}.',
                               QMessageBox.Ok)
        show_msg.exec_()
        Share.close(self)

    def send_to(self):
        #try:
        self.name = self.lineEdit.text()
        if self.name != "":
            self.find_user()
        else:
            self.not_found()
        # except:
        #     print("check error here")
        #     pass # self.not_found

    def find_user(self):
        db_path = "calendar_data_db.db"
        connection = sqlite3.connect(db_path)

        cursor = connection.cursor()
        print("search", self.name)
        user = None
        for row in cursor.execute("SELECT * FROM Users WHERE username=?", (self.name,)):
            user = row[0]
            passcode = row[1]
            code = row[2]
            print(f'{user:20} {passcode:10} {code:10}')  # EACH USER HAS THEIR OWN CALENDAR CODE THAT THEY USE TO SEE SPECIFIC CALENDARS
        if user == None:
            print("no such user")
            self.not_found()
        else:
            self.success()
            #for row in cursor.execute("SELECT * FROM Calendar WHERE code=?", (code,)):
            # need sender name
            #for row in cursor.execute("UPDATE Calendar SET code=? WHERE username=? AND", (receiver_code,sender_name)): # overrites senders code?
        #     #get all personal data and insert into other persons table
